//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/go@4.0.0-preview.45)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package generated

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

type CarsAPIClient struct {
	pl runtime.Pipeline
}

// NewCarsAPIClient creates a new instance of CarsAPIClient with the specified values.
//   - pl - the pipeline used for sending requests and handling responses.
func NewCarsAPIClient(pl runtime.Pipeline) *CarsAPIClient {
	client := &CarsAPIClient{
		pl: pl,
	}
	return client
}

// AddCar - Add a new car to the garage
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - body - Create a new car in the garage
//   - options - CarsAPIClientAddCarOptions contains the optional parameters for the CarsAPIClient.AddCar method.
func (client *CarsAPIClient) AddCar(ctx context.Context, body Car, options *CarsAPIClientAddCarOptions) (CarsAPIClientAddCarResponse, error) {
	req, err := client.addCarCreateRequest(ctx, body, options)
	if err != nil {
		return CarsAPIClientAddCarResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CarsAPIClientAddCarResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusOK, http.StatusMethodNotAllowed) {
		return CarsAPIClientAddCarResponse{}, runtime.NewResponseError(resp)
	}
	return client.addCarHandleResponse(resp)
}

// addCarCreateRequest creates the AddCar request.
func (client *CarsAPIClient) addCarCreateRequest(ctx context.Context, body Car, options *CarsAPIClientAddCarOptions) (*policy.Request, error) {
	urlPath := "/car"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json, application/xml"}
	return req, runtime.MarshalAsJSON(req, body)
}

// addCarHandleResponse handles the AddCar response.
func (client *CarsAPIClient) addCarHandleResponse(resp *http.Response) (CarsAPIClientAddCarResponse, error) {
	result := CarsAPIClientAddCarResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Car); err != nil {
		return CarsAPIClientAddCarResponse{}, err
	}
	return result, nil
}

// Car - Operation to list all car information
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 1.0.0
//   - options - CarsAPIClientCarOptions contains the optional parameters for the CarsAPIClient.Car method.
func (client *CarsAPIClient) Car(ctx context.Context, carname string, options *CarsAPIClientCarOptions) (CarsAPIClientCarResponse, error) {
	req, err := client.carCreateRequest(ctx, carname, options)
	if err != nil {
		return CarsAPIClientCarResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CarsAPIClientCarResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CarsAPIClientCarResponse{}, runtime.NewResponseError(resp)
	}
	return client.carHandleResponse(resp)
}

// carCreateRequest creates the Car request.
func (client *CarsAPIClient) carCreateRequest(ctx context.Context, carname string, options *CarsAPIClientCarOptions) (*policy.Request, error) {
	urlPath := "/car"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("carname", carname)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// carHandleResponse handles the Car response.
func (client *CarsAPIClient) carHandleResponse(resp *http.Response) (CarsAPIClientCarResponse, error) {
	result := CarsAPIClientCarResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Car); err != nil {
		return CarsAPIClientCarResponse{}, err
	}
	return result, nil
}

